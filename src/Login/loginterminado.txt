vimport React, { useEffect, useState } from 'react';
import { signInWithEmailAndPassword, setPersistence, browserLocalPersistence, onAuthStateChanged } from 'firebase/auth';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { auth } from '../firebase'; // Ajusta la ruta seg√∫n la ubicaci√≥n de tu archivo firebase.js
import { getFirestore, doc, getDoc } from 'firebase/firestore';
import './Login.css';
import HomeAdmin from '../Home/homeAdmin.js'; // Importa el componente HomeAdmin
import HomeUser from '../HomeUser/homeUser.js'; // Importa el componente HomeUser
import LoadingScreen from '../Resources/LoadingScreen/LoadingScreen.js'; // Importa el componente LoadingScreen

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Controla si el usuario est√° logueado
  const [isAdmin, setIsAdmin] = useState(false); // Controla si el usuario es admin
  const [loading, setLoading] = useState(true); // Controla la pantalla de carga

  // Verifica si el usuario ya est√° autenticado al cargar el componente
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // Establece la persistencia de la sesi√≥n a 'local' para mantener la sesi√≥n por 15 d√≠as
        await setPersistence(auth, browserLocalPersistence);

        onAuthStateChanged(auth, async (user) => {
          if (user) {
            // Si el usuario est√° autenticado, verifica si es administrador
            const db = getFirestore();
            const adminDocRef = doc(db, 'administradores', user.email);
            const adminDocSnap = await getDoc(adminDocRef);

            if (adminDocSnap.exists()) {
              setIsAdmin(true);
            } else {
              setIsAdmin(false);
            }

            setIsLoggedIn(true);
          } else {
            setIsLoggedIn(false);
          }
          setLoading(false); // Oculta la pantalla de carga despu√©s de verificar la autenticaci√≥n
        });
      } catch (error) {
        console.error('Error al verificar la autenticaci√≥n:', error.message);
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true); // Muestra la pantalla de carga

    try {
      // Inicia sesi√≥n con email y contrase√±a
      await signInWithEmailAndPassword(auth, email, password);

      // Obt√©n la instancia de Firestore
      const db = getFirestore();

      // Verifica si el usuario es un administrador en la colecci√≥n "administradores"
      const adminDocRef = doc(db, 'administradores', email);
      const adminDocSnap = await getDoc(adminDocRef);

      if (adminDocSnap.exists()) {
        setIsAdmin(true);
      } else {
        setIsAdmin(false);
      }

      setIsLoggedIn(true);
      setLoading(false);
    } catch (error) {
      console.error('Error al iniciar sesi√≥n:', error.message);
      toast.error('No se pudo iniciar sesi√≥n');
      setLoading(false);
    }
  };

  // Renderiza el componente correspondiente si el usuario est√° logueado
  if (loading) {
    return <LoadingScreen />;
  }

  if (isLoggedIn) {
    return isAdmin ? <HomeAdmin /> : <HomeUser />;
  }

  // Muestra el formulario de inicio de sesi√≥n si no est√° autenticado
  return (
    <div className="login-container-login">
      <form className="login-form-login" onSubmit={handleSubmit}>
        <h2 className="login-title-login">Iniciar sesi√≥n</h2>
        
        <div className="input-group-login">
          <label htmlFor="email" className="input-label-login">Correo electr√≥nico</label>
          <input
            type="email"
            id="email"
            placeholder="Ingrese su correo electr√≥nico"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="login-input-login"
            required
          />
        </div>
        
        <div className="input-group-login">
          <label htmlFor="password" className="input-label-login">Contrase√±a</label>
          <div className="password-container-login">
            <input
              type={showPassword ? 'text' : 'password'}
              id="password"
              placeholder="Ingrese su contrase√±a"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="login-input-password-toggle"
              required
            />
            <span
              className="password-toggle-icon-login"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? 'üôà' : 'üëÅÔ∏è'}
            </span>
          </div>
        </div>
        
        <button type="submit" className="login-button-login">Iniciar sesi√≥n</button>
        
        <p className="register-link-login">
          ¬øNo tienes una cuenta? <a href="/registro">Reg√≠strate</a>
        </p>
      </form>

      {/* Contenedor de Toast */} 
      <ToastContainer position="top-right" autoClose={3000} />
    </div>
  );
};

export default Login;
